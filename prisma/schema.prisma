// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avatar {
  id             Int      @id @default(autoincrement())
  asset          String
  createdAt      DateTime @default(now()) @map("created_at")
  usersUsingThis User[]
}

model User {
  id           Int                    @id @default(autoincrement())
  name         String?
  email        String?                @unique
  address      String                 @unique
  referralCode String                 @unique
  avatarId     Int?                   @map("avatar_id")
  avatar       Avatar?                @relation(fields: [avatarId], references: [id])
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  transactions ProcessedTransaction[]
  pointHistory PointHistory[]
  isAdmin      Boolean                @default(false) @map("is_admin")
  referrers    Referral[]             @relation("ReferrerUser")
  referrees    Referral[]             @relation("RefereeUser")
}

enum TransactionType {
  SWAP
  MINT
  BURN
  TRANSFER
  OTHER
}

model Chain {
  id               Int                    @id
  name             String
  rpc              String
  lastIndexedBlock BigInt?                @map("last_indexed_block")
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime?              @updatedAt @map("updated_at")
  transactions     ProcessedTransaction[]
}

model ProcessedTransaction {
  id           BigInt          @id @default(autoincrement())
  hash         String
  blockNumber  BigInt          @map("block_number")
  from         String
  to           String
  token0       String
  token1       String?
  token0Amount Float           @map("token0_amount")
  token1Amount Float?          @map("token1_amount")
  type         TransactionType @default(SWAP)
  createdAt    DateTime        @default(now()) @map("created_at")
  processedAt  DateTime?       @map("processed_at")

  userId   Int?   @map("user_id")
  user     User?  @relation(fields: [userId], references: [id])
  chainId  Int?   @map("chain_id")
  chain    Chain? @relation(fields: [chainId], references: [id])
  metadata Json?

  relatedPoints PointHistory[]
}

enum PointSystemRuleType {
  GENERAL
  EVENT
}

model PointSystemRule {
  id              Int                 @id @default(autoincrement())
  type            PointSystemRuleType @default(GENERAL)
  token0          String?
  token1          String?
  transactionType TransactionType     @default(SWAP) @map("trx_type")
  baseValue       Float               @map("base_value")
  relativeValue   Float               @default(0.0) @map("relative_value")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime?           @updatedAt @map("updated_at")
  pointHistory    PointHistory[]
}

enum PointSources {
  TRANSACTION
  DIRECT_REFERRAL
  INDIRECT_REFERRAL
  ACTIVISION_REFERRAL
  ONCHAIN_ACTIVITY
  SOCIAL_ACTIVITY // offchain activity like twitter or whatever.
}

model PointHistory {
  id        BigInt    @id @default(autoincrement())
  amount    Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  source        PointSources          @default(TRANSACTION) @map("source")
  ruleId        Int?
  rule          PointSystemRule?      @relation(fields: [ruleId], references: [id])
  transactionId BigInt?               @map("trx_id")
  transaction   ProcessedTransaction? @relation(fields: [transactionId], references: [id])
  userId        Int?                  @map("user_id")
  user          User?                 @relation(fields: [userId], references: [id])
  metadata      Json?
}

model Referral {
  createdAt DateTime @default(now())

  referrer   User @relation("ReferrerUser", fields: [referrerId], references: [id])
  referrerId Int  @map("referrer_id")
  user       User @relation("RefereeUser", fields: [userId], references: [id])
  userId     Int  @map("user_id")

  layer Int @default(0)

  @@id([referrerId, userId])
}

// The parameter which specifies how much a referee has spend (or has been active), which then will
// multiplied in referral-rule ratios; And the result will be rewarded to the referrer
enum ReferralCriteriaModes {
  POINTS
  TRANSACTIONS
  SWAPS_ONLY
  MINTS_ONLY
}

enum ReferralRewardType {
  POINT
  MON
  // Other types or tokens
}

// FIXME: Define SupportedTokens enum and replace All token types with its values; So postgres can better index them.

model ReferralRules {
  id                   Int                   @id @default(autoincrement())
  criteria             ReferralCriteriaModes @default(POINTS) @map("criteria")
  criteriaToken        String?               @map("criteria_token") // In case basis is not POINTS
  activisionReward     Float                 @default(0) @map("activision_reward") // Amount which goes to both referee and referrer right after linking
  activisionRewardType ReferralRewardType    @default(POINT) @map("activision_reward_type")
  directRewardRatio    Float                 @default(0.1) @map("direct_referral_ratio") // Specifying the percentage goes to referrer based on sum of amount gained by direct referees
  directRewardType     ReferralRewardType    @default(POINT) @map("direct_referral_type") // Specifying the percentage goes to referrer based on sum of amount gained by direct referees
  indirectRewardRatio  Float                 @default(0.01) @map("indirect_referral_ratio") // Specifying the percentage goes to referrer based on sum of amount gained by indirect referees
  indirectRewardType   ReferralRewardType    @default(POINT) @map("indirect_referral_type") // Specifying the percentage goes to referrer based on sum of amount gained by indirect referees
  devidByLayer         Boolean               @default(false) @map("devide_by_layer") // Affect referral layer in rewards amount, deviding the final reward on (layer + 1)
  lastPaymentAt        DateTime?             @map("last_payment_at")
}
