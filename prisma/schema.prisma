// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Avatar {
  id             Int      @id @default(autoincrement())
  asset          String
  createdAt      DateTime @default(now()) @map("created_at")
  usersUsingThis User[]
}

model User {
  id           Int                    @id @default(autoincrement())
  name         String?
  email        String?                @unique
  address      String                 @unique
  referralCode String                 @unique
  avatarId     Int?                   @map("avatar_id")
  avatar       Avatar?                @relation(fields: [avatarId], references: [id])
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")
  transactions ProcessedTransaction[]
  pointHistory PointHistory[]

  referrers Referral[] @relation("ReferrerUser")
  referrees Referral[] @relation("RefereeUser")
}

model Block {
  id                    Int                    @id @default(autoincrement())
  number                BigInt                 @unique
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  processedTransactions ProcessedTransaction[]
}

enum TransactionType {
  SWAP
  MINT
  BURN
  TRANSFER
  OTHER
}

model ProcessedTransaction {
  id           BigInt          @id @default(autoincrement())
  hash         String
  blockId      Int             @map("block_id")
  block        Block           @relation(fields: [blockId], references: [id])
  from         String
  to           String
  token0       String
  token1       String?
  token0Amount Float           @map("token0_amount")
  token1Amount Float?          @map("token1_amount")
  type         TransactionType @default(SWAP)
  createdAt    DateTime        @default(now()) @map("created_at")
  processedAt  DateTime?       @map("processed_at")

  userId        Int?           @map("user_id")
  user          User?          @relation(fields: [userId], references: [id])
  relatedPoints PointHistory[]
}

enum PointSystemRuleType {
  GENERAL
  EVENT
}

model PointSystemRule {
  id              Int                 @id @default(autoincrement())
  type            PointSystemRuleType @default(GENERAL)
  token0          String?
  token1          String?
  transactionType TransactionType     @default(SWAP) @map("trx_type")
  baseValue       Float               @map("base_value")
  relativeValue   Float               @default(0.0) @map("relative_value")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime?           @map("updated_at")
  pointHistory    PointHistory[]
}

model PointHistory {
  id        BigInt    @id @default(autoincrement())
  amount    Float
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  ruleId        Int
  rule          PointSystemRule      @relation(fields: [ruleId], references: [id])
  transactionId BigInt               @map("trx_id")
  transaction   ProcessedTransaction @relation(fields: [transactionId], references: [id])
  userId        Int?                 @map("user_id")
  user          User?                @relation(fields: [userId], references: [id])
}

model Referral {
  createdAt DateTime @default(now())

  referrer   User @relation("ReferrerUser", fields: [referrerId], references: [id])
  referrerId Int
  user       User @relation("RefereeUser", fields: [userId], references: [id])
  userId     Int

  layer Int @default(0)

  @@id([referrerId, userId])
}
